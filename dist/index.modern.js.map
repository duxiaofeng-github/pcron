{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import dayjs, { Dayjs, OpUnitType } from \"dayjs\";\nimport weekOfYear from \"dayjs/plugin/weekOfYear\";\nimport weekday from \"dayjs/plugin/weekday\";\n\ndayjs.extend(weekOfYear);\ndayjs.extend(weekday);\n\nenum Unit {\n  Year,\n  Month,\n  Day,\n  Hour,\n  Min,\n  Sec,\n  WeekOfYear,\n  Weekday,\n  WeekOfMonth,\n}\n\nfunction isWeek(expression: string) {\n  return expression.indexOf(\"/\") !== -1;\n}\n\nfunction isWeekOfYear(blocks: string[]) {\n  return blocks.length === 5;\n}\n\nconst validateRules = {\n  [Unit.Year]: undefined,\n  [Unit.Month]: [1, 12],\n  [Unit.Day]: [1, 31],\n  [Unit.Hour]: [0, 23],\n  [Unit.Min]: [0, 59],\n  [Unit.Sec]: [0, 59],\n  [Unit.WeekOfYear]: [1, 52],\n  [Unit.WeekOfMonth]: [1, 4],\n  [Unit.Weekday]: [0, 6],\n};\n\nfunction validateRange(start: number, end: number, type: Unit) {\n  if (isNaN(start) || isNaN(end)) {\n    return false;\n  }\n\n  const rule = validateRules[type];\n\n  if (rule == null) {\n    return true;\n  }\n\n  const [startRule, endRule] = rule;\n\n  return start >= startRule && end <= endRule;\n}\n\nfunction parseRange(range: string, type: Unit): Range[] {\n  if (range === \"*\") {\n    return [];\n  }\n\n  const rangeArray = range.split(\",\");\n\n  return rangeArray.map((item) => {\n    const [startString, endString] = item.split(\"-\");\n    const start = parseInt(startString);\n    const end = parseInt(endString);\n\n    if (!validateRange(start, end, type)) {\n      throw new Error(`Invalid range ${start}-${end} in`);\n    }\n\n    return { start, end };\n  });\n}\n\nfunction parseBlocks(options: {\n  period: string;\n  year: string;\n  month?: string;\n  weekOfYear?: string;\n  weekOfMonth?: string;\n  weekday?: string;\n  day?: string;\n  hour: string;\n  min: string;\n  sec: string;\n}) {\n  const { period, year, month, weekOfYear, weekOfMonth, weekday, day, hour, min, sec } = options;\n  const parsedYear = parseRange(year, Unit.Year);\n  const parsedMonth = month != null ? parseRange(month, Unit.Month) : undefined;\n  const parsedWeekOfYear = weekOfYear != null ? parseRange(weekOfYear, Unit.WeekOfYear) : undefined;\n  const parsedWeekOfMonth = weekOfMonth != null ? parseRange(weekOfMonth, Unit.WeekOfMonth) : undefined;\n  const parsedWeekday = weekday != null ? parseRange(weekday, Unit.Weekday) : undefined;\n  const parsedDay = day != null ? parseRange(day, Unit.Day) : undefined;\n  const parsedHour = parseRange(hour, Unit.Hour);\n  const parsedMin = parseRange(min, Unit.Min);\n  const parsedSec = parseRange(sec, Unit.Sec);\n\n  return {\n    period,\n    year: parsedYear,\n    month: parsedMonth,\n    weekOfYear: parsedWeekOfYear,\n    weekOfMonth: parsedWeekOfMonth,\n    weekday: parsedWeekday,\n    day: parsedDay,\n    hour: parsedHour,\n    min: parsedMin,\n    sec: parsedSec,\n  };\n}\n\nfunction getPeriodByUnit(period: string, unit: Unit): { periodNumber: number; opUnit: OpUnitType } {\n  const [dateSection, timeSection = \"\"] = period.replace(\"P\", \"\").split(\"T\");\n  let result;\n  let opUnit: OpUnitType;\n\n  switch (unit) {\n    case Unit.Sec:\n      result = timeSection.match(/(\\d+)[s]/i);\n      opUnit = \"second\";\n      break;\n    case Unit.Min:\n      result = timeSection.match(/(\\d+)[m]/i);\n      opUnit = \"minute\";\n      break;\n    case Unit.Hour:\n      result = timeSection.match(/(\\d+)[h]/i);\n      opUnit = \"hour\";\n      break;\n    case Unit.Day:\n    case Unit.Weekday:\n    case Unit.WeekOfMonth:\n    case Unit.WeekOfYear:\n      result = dateSection.match(/(\\d+)[d]/i);\n      opUnit = \"day\";\n      break;\n    case Unit.Month:\n      result = dateSection.match(/(\\d+)[m]/i);\n      opUnit = \"month\";\n      break;\n    case Unit.Year:\n      result = dateSection.match(/(\\d+)[y]/i);\n      opUnit = \"year\";\n      break;\n  }\n\n  if (result) {\n    return { periodNumber: parseInt(result[1]), opUnit };\n  } else {\n    return { periodNumber: NaN, opUnit };\n  }\n}\n\nfunction moveToStartOrEndOfRage(time: Dayjs, unit: Unit, range: Range, isNext: boolean) {\n  const edge = isNext ? range.start : range.end;\n\n  switch (unit) {\n    case Unit.Sec:\n      return time.second(edge);\n    case Unit.Min:\n      return time.minute(edge);\n    case Unit.Hour:\n      return time.hour(edge);\n    case Unit.Day:\n      return time.date(edge);\n    case Unit.Weekday:\n      return time.weekday(edge);\n    case Unit.WeekOfMonth:\n      const currentWeekday = time.weekday();\n      return time.startOf(\"month\").week(edge).weekday(currentWeekday);\n    case Unit.WeekOfYear:\n      return time.week(edge);\n    case Unit.Month:\n      return time.month(edge);\n    case Unit.Year:\n      return time.year(edge);\n  }\n}\n\nfunction getOffsetByRanges(num: number, ranges: Range[]) {\n  let rangeIndex = 0;\n  let inRange = false;\n\n  for (let i = 0; i < ranges.length; i++) {\n    rangeIndex = i;\n\n    const range = ranges[i];\n    const prevRange = ranges[i - 1];\n\n    if (num >= range.start && num <= range.end) {\n      inRange = true;\n\n      break;\n    } else if (prevRange != null && num > prevRange.end && num < range.start) {\n      break;\n    }\n  }\n\n  return { rangeIndex, inRange };\n}\n\nfunction getStartOrEndTimeOfNextRange(\n  unit: Unit,\n  currentTime: Dayjs,\n  options: Options,\n  ranges: Range[],\n  rangeIndex: number,\n  isNext: boolean\n): Dayjs | null {\n  const { weekOfMonth: weekOfMonthRanges, day: dayRanges } = options;\n  const nextRange = ranges[rangeIndex + 1];\n\n  if (nextRange != null) {\n    return moveToStartOrEndOfRage(currentTime, unit, nextRange, isNext);\n  } else {\n    let nextUnit;\n\n    switch (unit) {\n      case Unit.Sec:\n        nextUnit = Unit.Min;\n        break;\n      case Unit.Min:\n        nextUnit = Unit.Hour;\n        break;\n      case Unit.Hour:\n        nextUnit = dayRanges != null ? Unit.Day : Unit.Weekday;\n        break;\n      case Unit.Day:\n        nextUnit = Unit.Month;\n        break;\n      case Unit.Weekday:\n        nextUnit = weekOfMonthRanges != null ? Unit.WeekOfMonth : Unit.WeekOfYear;\n        break;\n      case Unit.WeekOfMonth:\n        nextUnit = Unit.Year;\n        break;\n      case Unit.WeekOfYear:\n        nextUnit = Unit.Year;\n        break;\n      case Unit.Month:\n        nextUnit = Unit.Year;\n        break;\n      case Unit.Year:\n        return null;\n    }\n\n    if (nextUnit) {\n      const newTime = getNextOrPrevTime(nextUnit, currentTime, options, isNext);\n\n      const nextRange = isNext ? ranges[0] : ranges[ranges.length - 1];\n\n      if (newTime != null && nextRange) {\n        return moveToStartOrEndOfRage(newTime, unit, nextRange, isNext);\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getValueByUnit(time: Dayjs, unit: Unit) {\n  switch (unit) {\n    case Unit.Sec:\n      return time.second();\n    case Unit.Min:\n      return time.minute();\n    case Unit.Hour:\n      return time.hour();\n    case Unit.Day:\n      return time.date();\n    case Unit.Weekday:\n      return time.weekday();\n    case Unit.WeekOfMonth:\n      return parseInt(time.format(\"w\")) - parseInt(time.startOf(\"M\").format(\"w\")) + 1;\n    case Unit.WeekOfYear:\n      return time.week();\n    case Unit.Month:\n      return time.month();\n    case Unit.Year:\n      return time.year();\n  }\n}\n\nfunction getRangesByUnit(options: Options, unit: Unit) {\n  const { year, month, weekOfYear, weekOfMonth, weekday, day, hour, min, sec } = options;\n\n  switch (unit) {\n    case Unit.Sec:\n      return sec;\n    case Unit.Min:\n      return min;\n    case Unit.Hour:\n      return hour;\n    case Unit.Day:\n      return day;\n    case Unit.Weekday:\n      return weekday;\n    case Unit.WeekOfMonth:\n      return weekOfMonth;\n    case Unit.WeekOfYear:\n      return weekOfYear;\n    case Unit.Month:\n      return month;\n    case Unit.Year:\n      return year;\n  }\n}\n\nfunction getNextOrPrevTime(unit: Unit, currentTime: Dayjs, options: Options, isNext = true): Dayjs | null {\n  let newTime: Dayjs | null = currentTime;\n  const { period } = options;\n\n  const value = getValueByUnit(currentTime, unit);\n  const ranges = getRangesByUnit(options, unit);\n\n  if (ranges && ranges.length) {\n    const { rangeIndex, inRange } = getOffsetByRanges(value, ranges);\n\n    if (!inRange) {\n      // out of range, move to the begining of next range\n\n      newTime = getStartOrEndTimeOfNextRange(unit, currentTime, options, ranges, rangeIndex, isNext);\n    } else {\n      // in range, move to next period and do out of range checking\n      const { periodNumber, opUnit } = getPeriodByUnit(period, unit);\n      newTime = isNext ? currentTime.add(periodNumber, opUnit) : currentTime.subtract(periodNumber, opUnit);\n\n      // if out of range, move to the begining of next range\n      const newValue = getValueByUnit(newTime, unit);\n      const { rangeIndex: newValueRangeIndex, inRange: newValueInRange } = getOffsetByRanges(newValue, ranges);\n\n      if (!newValueInRange) {\n        // out of range, move to the begining of next range\n\n        newTime = getStartOrEndTimeOfNextRange(unit, newTime, options, ranges, newValueRangeIndex, isNext);\n      }\n    }\n  }\n\n  return newTime;\n}\n\ninterface Range {\n  start: number;\n  end: number;\n}\n\ninterface Options {\n  period: string;\n  year: Range[];\n  month?: Range[];\n  weekOfYear?: Range[];\n  weekOfMonth?: Range[];\n  weekday?: Range[];\n  day?: Range[];\n  hour: Range[];\n  min: Range[];\n  sec: Range[];\n}\n\nclass Result {\n  private options: Options;\n  private originalTimestamp: number;\n  private currentTime: Dayjs;\n  private hasPrev = true;\n  private hasNext = true;\n\n  constructor(options: Options, timestamp: number) {\n    this.options = options;\n    this.originalTimestamp = timestamp;\n    this.currentTime = dayjs.unix(timestamp);\n  }\n\n  reset() {\n    this.currentTime = dayjs.unix(this.originalTimestamp);\n  }\n\n  prev() {\n    if (!this.hasPrev) {\n      return null;\n    }\n\n    const newTime = getNextOrPrevTime(Unit.Sec, this.currentTime, this.options);\n\n    this.hasPrev = newTime != null;\n\n    if (newTime != null) {\n      this.currentTime = newTime;\n    }\n\n    return newTime;\n  }\n\n  next() {\n    if (!this.hasNext) {\n      return null;\n    }\n\n    const newTime = getNextOrPrevTime(Unit.Sec, this.currentTime, this.options, true);\n\n    this.hasNext = newTime != null;\n\n    if (newTime != null) {\n      this.currentTime = newTime;\n    }\n\n    return newTime;\n  }\n}\n\nexport function parseExpression(expression: string, timestamp: number) {\n  const blocks = expression.split(\" \");\n  let options: Options;\n\n  if (isWeek(expression)) {\n    if (isWeekOfYear(blocks)) {\n      const [period, year, weekOfYear, hour, min, sec] = blocks;\n      const [week, weekday] = weekOfYear.split(\"/\");\n\n      options = parseBlocks({ period, year, weekOfYear: week, weekday, hour, min, sec });\n    } else {\n      const [period, year, month, weekOfMonth, hour, min, sec] = blocks;\n      const [week, weekday] = weekOfMonth.split(\"/\");\n\n      options = parseBlocks({ period, year, month, weekOfMonth: week, weekday, hour, min, sec });\n    }\n  } else {\n    const [period, year, month, day, hour, min, sec] = expression.split(\" \");\n\n    options = parseBlocks({ period, year, month, day, hour, min, sec });\n  }\n\n  return new Result(options, timestamp);\n}\n"],"names":["Unit","dayjs","extend","weekOfYear","weekday","validateRules","[object Object]","Year","undefined","Month","Day","Hour","Min","Sec","WeekOfYear","WeekOfMonth","Weekday","parseRange","range","type","split","map","item","startString","endString","start","parseInt","end","isNaN","rule","startRule","endRule","validateRange","Error","parseBlocks","options","period","year","month","weekOfMonth","day","hour","min","sec","moveToStartOrEndOfRage","time","unit","isNext","edge","second","minute","date","currentWeekday","startOf","week","getOffsetByRanges","num","ranges","rangeIndex","inRange","i","length","prevRange","getStartOrEndTimeOfNextRange","currentTime","weekOfMonthRanges","dayRanges","nextRange","nextUnit","newTime","getNextOrPrevTime","getValueByUnit","format","value","getRangesByUnit","periodNumber","opUnit","dateSection","timeSection","replace","result","match","NaN","getPeriodByUnit","add","subtract","newValue","newValueRangeIndex","newValueInRange","Result","constructor","timestamp","this","originalTimestamp","unix","reset","prev","hasPrev","next","hasNext","parseExpression","expression","blocks","indexOf","isWeek","isWeekOfYear"],"mappings":"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"}