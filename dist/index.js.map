{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import dayjs, { Dayjs, OpUnitType } from \"dayjs\";\nimport weekOfYear from \"dayjs/plugin/weekOfYear\";\nimport weekday from \"dayjs/plugin/weekday\";\n\ndayjs.extend(weekOfYear);\ndayjs.extend(weekday);\n\nenum Unit {\n  Year,\n  Month,\n  Day,\n  Hour,\n  Min,\n  Sec,\n  WeekOfYear,\n  Weekday,\n  WeekOfMonth,\n}\n\nfunction isWeek(expression: string) {\n  return expression.indexOf(\"/\") !== -1;\n}\n\nfunction isWeekOfYear(blocks: string[]) {\n  return blocks.length === 5;\n}\n\nconst validateRules = {\n  [Unit.Year]: undefined,\n  [Unit.Month]: [1, 12],\n  [Unit.Day]: [1, 31],\n  [Unit.Hour]: [0, 23],\n  [Unit.Min]: [0, 59],\n  [Unit.Sec]: [0, 59],\n  [Unit.WeekOfYear]: [1, 52],\n  [Unit.WeekOfMonth]: [1, 4],\n  [Unit.Weekday]: [0, 6],\n};\n\nfunction validateRange(start: number, end: number, type: Unit) {\n  if (isNaN(start) || isNaN(end)) {\n    return false;\n  }\n\n  const rule = validateRules[type];\n\n  if (rule == null) {\n    return true;\n  }\n\n  const [startRule, endRule] = rule;\n\n  return start >= startRule && end <= endRule;\n}\n\nfunction parseRange(range: string, type: Unit): Range[] {\n  if (range === \"*\") {\n    return [];\n  }\n\n  const rangeArray = range.split(\",\");\n\n  return rangeArray.map((item) => {\n    const [startString, endString] = item.split(\"-\");\n    const start = parseInt(startString);\n    const end = parseInt(endString);\n\n    if (!validateRange(start, end, type)) {\n      throw new Error(`Invalid range ${start}-${end} in`);\n    }\n\n    return { start, end };\n  });\n}\n\nfunction parseBlocks(options: {\n  period: string;\n  year: string;\n  month?: string;\n  weekOfYear?: string;\n  weekOfMonth?: string;\n  weekday?: string;\n  day?: string;\n  hour: string;\n  min: string;\n  sec: string;\n}) {\n  const { period, year, month, weekOfYear, weekOfMonth, weekday, day, hour, min, sec } = options;\n  const parsedYear = parseRange(year, Unit.Year);\n  const parsedMonth = month != null ? parseRange(month, Unit.Month) : undefined;\n  const parsedWeekOfYear = weekOfYear != null ? parseRange(weekOfYear, Unit.WeekOfYear) : undefined;\n  const parsedWeekOfMonth = weekOfMonth != null ? parseRange(weekOfMonth, Unit.WeekOfMonth) : undefined;\n  const parsedWeekday = weekday != null ? parseRange(weekday, Unit.Weekday) : undefined;\n  const parsedDay = day != null ? parseRange(day, Unit.Day) : undefined;\n  const parsedHour = parseRange(hour, Unit.Hour);\n  const parsedMin = parseRange(min, Unit.Min);\n  const parsedSec = parseRange(sec, Unit.Sec);\n\n  return {\n    period,\n    year: parsedYear,\n    month: parsedMonth,\n    weekOfYear: parsedWeekOfYear,\n    weekOfMonth: parsedWeekOfMonth,\n    weekday: parsedWeekday,\n    day: parsedDay,\n    hour: parsedHour,\n    min: parsedMin,\n    sec: parsedSec,\n  };\n}\n\nfunction getPeriodByUnit(period: string, unit: Unit): { periodNumber: number; opUnit: OpUnitType } {\n  const [dateSection, timeSection = \"\"] = period.replace(\"P\", \"\").split(\"T\");\n  let result;\n  let opUnit: OpUnitType;\n\n  switch (unit) {\n    case Unit.Sec:\n      result = timeSection.match(/(\\d+)[s]/i);\n      opUnit = \"second\";\n      break;\n    case Unit.Min:\n      result = timeSection.match(/(\\d+)[m]/i);\n      opUnit = \"minute\";\n      break;\n    case Unit.Hour:\n      result = timeSection.match(/(\\d+)[h]/i);\n      opUnit = \"hour\";\n      break;\n    case Unit.Day:\n    case Unit.Weekday:\n    case Unit.WeekOfMonth:\n    case Unit.WeekOfYear:\n      result = dateSection.match(/(\\d+)[d]/i);\n      opUnit = \"day\";\n      break;\n    case Unit.Month:\n      result = dateSection.match(/(\\d+)[m]/i);\n      opUnit = \"month\";\n      break;\n    case Unit.Year:\n      result = dateSection.match(/(\\d+)[y]/i);\n      opUnit = \"year\";\n      break;\n  }\n\n  if (result) {\n    return { periodNumber: parseInt(result[1]), opUnit };\n  } else {\n    return { periodNumber: NaN, opUnit };\n  }\n}\n\nfunction moveToStartOrEndOfRage(time: Dayjs, unit: Unit, range: Range, isNext: boolean) {\n  const edge = isNext ? range.start : range.end;\n\n  switch (unit) {\n    case Unit.Sec:\n      return time.second(edge);\n    case Unit.Min:\n      return time.minute(edge);\n    case Unit.Hour:\n      return time.hour(edge);\n    case Unit.Day:\n      return time.date(edge);\n    case Unit.Weekday:\n      return time.weekday(edge);\n    case Unit.WeekOfMonth:\n      const currentWeekday = time.weekday();\n      return time.startOf(\"month\").week(edge).weekday(currentWeekday);\n    case Unit.WeekOfYear:\n      return time.week(edge);\n    case Unit.Month:\n      return time.month(edge);\n    case Unit.Year:\n      return time.year(edge);\n  }\n}\n\nfunction getOffsetByRanges(num: number, ranges: Range[]) {\n  let rangeIndex = 0;\n  let inRange = false;\n\n  for (let i = 0; i < ranges.length; i++) {\n    rangeIndex = i;\n\n    const range = ranges[i];\n    const prevRange = ranges[i - 1];\n\n    if (num >= range.start && num <= range.end) {\n      inRange = true;\n\n      break;\n    } else if (prevRange != null && num > prevRange.end && num < range.start) {\n      break;\n    }\n  }\n\n  return { rangeIndex, inRange };\n}\n\nfunction getStartOrEndTimeOfNextRange(\n  unit: Unit,\n  currentTime: Dayjs,\n  options: Options,\n  ranges: Range[],\n  rangeIndex: number,\n  isNext: boolean\n): Dayjs | null {\n  const { weekOfMonth: weekOfMonthRanges, day: dayRanges } = options;\n  const nextRange = ranges[rangeIndex + 1];\n\n  if (nextRange != null) {\n    return moveToStartOrEndOfRage(currentTime, unit, nextRange, isNext);\n  } else {\n    let nextUnit;\n\n    switch (unit) {\n      case Unit.Sec:\n        nextUnit = Unit.Min;\n        break;\n      case Unit.Min:\n        nextUnit = Unit.Hour;\n        break;\n      case Unit.Hour:\n        nextUnit = dayRanges != null ? Unit.Day : Unit.Weekday;\n        break;\n      case Unit.Day:\n        nextUnit = Unit.Month;\n        break;\n      case Unit.Weekday:\n        nextUnit = weekOfMonthRanges != null ? Unit.WeekOfMonth : Unit.WeekOfYear;\n        break;\n      case Unit.WeekOfMonth:\n        nextUnit = Unit.Year;\n        break;\n      case Unit.WeekOfYear:\n        nextUnit = Unit.Year;\n        break;\n      case Unit.Month:\n        nextUnit = Unit.Year;\n        break;\n      case Unit.Year:\n        return null;\n    }\n\n    if (nextUnit) {\n      const newTime = getNextOrPrevTime(nextUnit, currentTime, options, isNext);\n\n      const nextRange = isNext ? ranges[0] : ranges[ranges.length - 1];\n\n      if (newTime != null && nextRange) {\n        return moveToStartOrEndOfRage(newTime, unit, nextRange, isNext);\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getValueByUnit(time: Dayjs, unit: Unit) {\n  switch (unit) {\n    case Unit.Sec:\n      return time.second();\n    case Unit.Min:\n      return time.minute();\n    case Unit.Hour:\n      return time.hour();\n    case Unit.Day:\n      return time.date();\n    case Unit.Weekday:\n      return time.weekday();\n    case Unit.WeekOfMonth:\n      return parseInt(time.format(\"w\")) - parseInt(time.startOf(\"M\").format(\"w\")) + 1;\n    case Unit.WeekOfYear:\n      return time.week();\n    case Unit.Month:\n      return time.month();\n    case Unit.Year:\n      return time.year();\n  }\n}\n\nfunction getRangesByUnit(options: Options, unit: Unit) {\n  const { year, month, weekOfYear, weekOfMonth, weekday, day, hour, min, sec } = options;\n\n  switch (unit) {\n    case Unit.Sec:\n      return sec;\n    case Unit.Min:\n      return min;\n    case Unit.Hour:\n      return hour;\n    case Unit.Day:\n      return day;\n    case Unit.Weekday:\n      return weekday;\n    case Unit.WeekOfMonth:\n      return weekOfMonth;\n    case Unit.WeekOfYear:\n      return weekOfYear;\n    case Unit.Month:\n      return month;\n    case Unit.Year:\n      return year;\n  }\n}\n\nfunction getNextOrPrevTime(unit: Unit, currentTime: Dayjs, options: Options, isNext = true): Dayjs | null {\n  let newTime: Dayjs | null = currentTime;\n  const { period } = options;\n\n  const value = getValueByUnit(currentTime, unit);\n  const ranges = getRangesByUnit(options, unit);\n\n  if (ranges && ranges.length) {\n    const { rangeIndex, inRange } = getOffsetByRanges(value, ranges);\n\n    if (!inRange) {\n      // out of range, move to the begining of next range\n\n      newTime = getStartOrEndTimeOfNextRange(unit, currentTime, options, ranges, rangeIndex, isNext);\n    } else {\n      // in range, move to next period and do out of range checking\n      const { periodNumber, opUnit } = getPeriodByUnit(period, unit);\n      newTime = isNext ? currentTime.add(periodNumber, opUnit) : currentTime.subtract(periodNumber, opUnit);\n\n      // if out of range, move to the begining of next range\n      const newValue = getValueByUnit(newTime, unit);\n      const { rangeIndex: newValueRangeIndex, inRange: newValueInRange } = getOffsetByRanges(newValue, ranges);\n\n      if (!newValueInRange) {\n        // out of range, move to the begining of next range\n\n        newTime = getStartOrEndTimeOfNextRange(unit, newTime, options, ranges, newValueRangeIndex, isNext);\n      }\n    }\n  }\n\n  return newTime;\n}\n\ninterface Range {\n  start: number;\n  end: number;\n}\n\ninterface Options {\n  period: string;\n  year: Range[];\n  month?: Range[];\n  weekOfYear?: Range[];\n  weekOfMonth?: Range[];\n  weekday?: Range[];\n  day?: Range[];\n  hour: Range[];\n  min: Range[];\n  sec: Range[];\n}\n\nclass Result {\n  private options: Options;\n  private originalTimestamp: number;\n  private currentTime: Dayjs;\n  private hasPrev = true;\n  private hasNext = true;\n\n  constructor(options: Options, timestamp: number) {\n    this.options = options;\n    this.originalTimestamp = timestamp;\n    this.currentTime = dayjs.unix(timestamp);\n  }\n\n  reset() {\n    this.currentTime = dayjs.unix(this.originalTimestamp);\n  }\n\n  prev() {\n    if (!this.hasPrev) {\n      return null;\n    }\n\n    const newTime = getNextOrPrevTime(Unit.Sec, this.currentTime, this.options);\n\n    this.hasPrev = newTime != null;\n\n    if (newTime != null) {\n      this.currentTime = newTime;\n    }\n\n    return newTime;\n  }\n\n  next() {\n    if (!this.hasNext) {\n      return null;\n    }\n\n    const newTime = getNextOrPrevTime(Unit.Sec, this.currentTime, this.options, true);\n\n    this.hasNext = newTime != null;\n\n    if (newTime != null) {\n      this.currentTime = newTime;\n    }\n\n    return newTime;\n  }\n}\n\nexport function parseExpression(expression: string, timestamp: number) {\n  const blocks = expression.split(\" \");\n  let options: Options;\n\n  if (isWeek(expression)) {\n    if (isWeekOfYear(blocks)) {\n      const [period, year, weekOfYear, hour, min, sec] = blocks;\n      const [week, weekday] = weekOfYear.split(\"/\");\n\n      options = parseBlocks({ period, year, weekOfYear: week, weekday, hour, min, sec });\n    } else {\n      const [period, year, month, weekOfMonth, hour, min, sec] = blocks;\n      const [week, weekday] = weekOfMonth.split(\"/\");\n\n      options = parseBlocks({ period, year, month, weekOfMonth: week, weekday, hour, min, sec });\n    }\n  } else {\n    const [period, year, month, day, hour, min, sec] = expression.split(\" \");\n\n    options = parseBlocks({ period, year, month, day, hour, min, sec });\n  }\n\n  return new Result(options, timestamp);\n}\n"],"names":["Unit","dayjs","extend","weekOfYear","weekday","validateRules","Year","undefined","Month","Day","Hour","Min","Sec","WeekOfYear","WeekOfMonth","Weekday","parseRange","range","type","split","map","item","endString","start","parseInt","end","isNaN","rule","validateRange","Error","parseBlocks","options","month","weekOfMonth","day","hour","min","sec","period","year","moveToStartOrEndOfRage","time","unit","isNext","edge","second","minute","date","currentWeekday","startOf","week","getOffsetByRanges","num","ranges","rangeIndex","inRange","i","length","prevRange","getStartOrEndTimeOfNextRange","currentTime","nextUnit","weekOfMonthRanges","dayRanges","nextRange","newTime","getNextOrPrevTime","getValueByUnit","format","value","getRangesByUnit","result","opUnit","replace","dateSection","timeSection","match","periodNumber","NaN","getPeriodByUnit","add","subtract","Result","timestamp","this","originalTimestamp","unix","reset","prev","hasPrev","next","hasNext","expression","blocks","indexOf","isWeek","isWeekOfYear"],"mappings":"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"}